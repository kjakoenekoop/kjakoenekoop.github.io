---
import {default as Link, Variant} from "@components/Link.astro";
import Globe from "./hero/globe.astro";
---

<section class="relative justify-center h-[85vh] sm:h-[95vh] w-screen max-w-full overflow-hidden grid grid-cols-2">

    <div class="absolute inset-0 -z-50 pointer-events-none">
        <canvas id="galaxy" class="h-full w-full"/>
        <div class="bg-gradient-to-t from-theme-900 to-transparent h-12 w-full absolute bottom-0"></div>
    </div>

    <div class="h-full w-full max-w-6xl grid sm:grid-cols-2">
        <div class="grid gap-y-10 self-center">
            <header class="grid gap-y-6 px-5 sm:pl-10">
                <h1 class="text-white text-4xl sm:text-6xl font-bold">Full-stack web developer ðŸš€</h1>
                <h2 class="text-lg text-theme-300 [text-wrap:balance]">Hi, Iâ€™m Koen. A curious developer specialized in Next.js and
                    TypeScript.</h2>
            </header>

            <div class="px-5 sm:pl-10 flex gap-x-6 gap-y-4 flex-wrap">
                <Link href="/contact" variant={Variant.solid}>Get in touch</Link>
                <Link href="/#" variant={Variant.text}>View my resume</Link>
            </div>
        </div>
    </div>

    <div class="border relative h-full w-full">
        <Globe/>
    </div>
</section>

<script>
    const STAR_COUNT = 300

    const createCanvas = () => {
        const canvas = document.getElementById('galaxy') as HTMLCanvasElement
        canvas.removeAttribute('mask')
        canvas.width = canvas.getBoundingClientRect().width
        canvas.height = canvas.getBoundingClientRect().height
        return canvas
    }

    const createStars = ({canvas, count}) => Array.from({length: count})
        .map(() => ({
            position: {
                x: Math.random() * Math.max(canvas.width, canvas.height),
                y: Math.random() * Math.max(canvas.width, canvas.height)
            },
            size: Math.random() * 1.2,
            speed: Math.random() * 0.0005 + 0.0004
        }))

    const drawStar = ({context, star}) => {
        context.beginPath()
        context.arc(star.position.x, star.position.y, star.size, 0, Math.PI * 2)
        context.closePath()
        context.fillStyle = "#34D399"
        context.fill()
    }

    const animateGalaxy = ({canvas, stars}) => {
        const context = canvas.getContext('2d')
        const animate = () => {
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.fillStyle = 'rgba(15,23,42,0.1)'
            context.fillRect(0, 0, canvas.width, canvas.height)
            stars.forEach(star => {
                drawStar({context, star})
                const center = {x: canvas.width / 2, y: canvas.height / 2}
                const angle = Math.atan2(star.position.y - center.y, star.position.x - center.x) + star.speed
                const distance = Math.sqrt(Math.pow(star.position.x - center.x, 2) + Math.pow(star.position.y - center.y, 2))
                star.position.x = center.x + distance * Math.cos(angle)
                star.position.y = center.y + distance * Math.sin(angle)
            })
            requestAnimationFrame(animate)
        }
        animate()
    }

    document.addEventListener('astro:page-load', () => {
        if(location.pathname !== '/') return
        const canvas = createCanvas()
        const stars = createStars({canvas, count: STAR_COUNT})
        animateGalaxy({canvas, stars})
    })
</script>

